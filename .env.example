# ====================================================================================================
# VETRA STABLECOIN - ENVIRONMENT CONFIGURATION
# ====================================================================================================
#
# This file contains ALL configuration for the Vetra stablecoin project.
# The entire project uses a SINGLE .env file with network switching via NODE_ENV.
#
# IMPORTANT: Copy this file to .env and fill in your values
# NEVER commit .env to version control!
#
# Configuration is loaded via: config/env.ts
# ====================================================================================================

# ====================================================================================================
# CORE CONFIGURATION
# ====================================================================================================

# NODE_ENV - Primary Network Selector
# ------------------------------------
# PURPOSE: Determines which network configuration to use (testnet vs mainnet)
# VALUES:  'development' = Polygon Amoy Testnet (uses AMOY_* variables)
#          'production'  = Polygon Mainnet (uses POLYGON_* variables)
# USED IN: config/env.ts (line 7) - All helper functions switch based on this value
#          hardhat.config.ts - Network configuration selection
#          All deployment scripts (scripts/deploy.ts, scripts/updateReserve.ts, etc.)
# HOW IT WORKS: When NODE_ENV=development, getAdminAddress() returns AMOY_ADMIN_ADDRESS
#               When NODE_ENV=production, getAdminAddress() returns POLYGON_ADMIN_ADDRESS
# DEPLOY TO TESTNET: Set to 'development'
# DEPLOY TO MAINNET: Set to 'production' (ONLY change this value, nothing else!)
NODE_ENV=development

# PRIVATE_KEY_DEV - Deployer Wallet Private Key
# ----------------------------------------------
# PURPOSE: Private key for the wallet that will deploy contracts and pay gas fees
# FORMAT:  64-character hexadecimal string (with or without 0x prefix)
# USED IN: config/env.ts (getPrivateKey function, line 30)
#          hardhat.config.ts - Signer configuration for both networks
#          scripts/deploy.ts - Transaction signer
#          scripts/updateReserve.ts - Transaction signer for reserve updates
# SECURITY: NEVER commit this to version control!
#           Use a hardware wallet for mainnet deployments
# TESTNET:  Use a test wallet with Amoy POL and test LINK
# MAINNET:  Ensure wallet has sufficient POL for gas + LINK for Chainlink Functions
# EXAMPLE: 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef
PRIVATE_KEY_DEV=0x0000000000000000000000000000000000000000000000000000000000000000

# POLYGONSCAN_API_KEY - Polygonscan/Amoy Polygonscan API Key
# -----------------------------------------------------------
# PURPOSE: Required for contract verification on Polygonscan block explorer
# WHERE TO GET: https://polygonscan.com/myapikey (register for free account)
# USED IN: config/env.ts (getPolygonscanApiKey function, line 34)
#          hardhat.config.ts (etherscan.apiKey configuration)
#          scripts/verify.ts - Contract verification on block explorer
# NOTE: The same API key works for both Polygon Mainnet AND Amoy Testnet
# BENEFIT: Verified contracts show source code on block explorer for transparency
POLYGONSCAN_API_KEY=SQFCTQ8UVHUN883CFCNVWZF8SF4QVVJSRY

# ====================================================================================================
# POLYGON AMOY TESTNET CONFIGURATION (development)
# ====================================================================================================
# These variables are used when NODE_ENV=development
# All AMOY_* variables configure the testnet deployment

# AMOY_RPC_URL - Polygon Amoy Testnet RPC Endpoint
# -------------------------------------------------
# PURPOSE: JSON-RPC endpoint URL for connecting to Polygon Amoy testnet
# USED IN: config/env.ts (getRpcUrl function, line 38)
#          hardhat.config.ts - Network configuration
#          scripts/deploy.ts - Blockchain connection
#          scripts/validate-config.ts - RPC connection test
# PUBLIC ENDPOINTS:
#   - https://rpc-amoy.polygon.technology (official)
#   - https://polygon-amoy.g.alchemy.com/v2/YOUR_KEY (Alchemy)
#   - https://polygon-amoy-bor-rpc.publicnode.com (PublicNode)
# CUSTOM RPC: You can use Alchemy, Infura, or QuickNode for better reliability
AMOY_RPC_URL=https://rpc-amoy.polygon.technology

# AMOY_CHAIN_ID - Polygon Amoy Chain ID
# --------------------------------------
# PURPOSE: Numeric identifier for Polygon Amoy testnet (ensures transactions go to correct network)
# VALUE: 80002 (fixed, do not change)
# USED IN: config/env.ts (getChainId function, line 42)
#          hardhat.config.ts - Network chain ID validation
#          scripts/validate-config.ts - Chain ID verification
# VALIDATION: Checked against actual network chain ID when connecting
AMOY_CHAIN_ID=80002

# AMOY_LINK_TOKEN - LINK Token Address on Amoy
# ---------------------------------------------
# PURPOSE: Address of the LINK ERC-20 token contract on Polygon Amoy (required for Chainlink Functions)
# VALUE: 0x0Fd9e8d3aF1aaee056EB9e802c3A762a667b1904 (official Chainlink LINK on Amoy)
# USED IN: config/env.ts (getLinkToken function, line 46)
#          scripts/updateReserve.ts - LINK token reference
# WHERE TO GET LINK: https://faucets.chain.link/polygon-amoy (2 test LINK per address)
# PURPOSE: Chainlink Functions requires LINK tokens to pay for oracle services
# NOTE: This is the official testnet LINK address, do not change
AMOY_LINK_TOKEN=0x0Fd9e8d3aF1aaee056EB9e802c3A762a667b1904

# AMOY_FUNCTIONS_ROUTER - Chainlink Functions Router Address on Amoy
# -------------------------------------------------------------------
# PURPOSE: Address of Chainlink Functions Router contract that handles oracle requests
# VALUE: 0xC22a79eBA640940ABB6dF0f7982cc119578E11De (official Chainlink Functions Router)
# USED IN: config/env.ts (getFunctionsRouter function, line 50)
#          contracts/Vetra.sol - initialize() function (line 187) - Stored in functionsRouter variable
#          contracts/Vetra.sol - requestReserveUpdate() function (line 346) - Used to send requests
# HOW IT WORKS: Contract calls router.sendRequest() to trigger Chainlink Functions
# DOCS: https://docs.chain.link/chainlink-functions/resources/supported-networks
AMOY_FUNCTIONS_ROUTER=0xC22a79eBA640940ABB6dF0f7982cc119578E11De

# AMOY_DON_ID - Chainlink Decentralized Oracle Network ID for Amoy
# -----------------------------------------------------------------
# PURPOSE: Identifier for the Chainlink Functions DON (Decentralized Oracle Network) on Amoy
# VALUE: 0x66756e2d706f6c79676f6e2d616d6f792d31... (hex encoding of "fun-polygon-amoy-1")
# USED IN: config/env.ts (getDonId function, line 54)
#          contracts/Vetra.sol - initialize() function (line 187) - Stored in donId variable
#          contracts/Vetra.sol - requestReserveUpdate() function (line 352) - Passed to router
# FORMAT: bytes32 hex string (66 characters including 0x)
# HOW IT WORKS: Tells Chainlink Functions which DON to route the request to
# NOTE: This is the official Amoy testnet DON ID, do not change
AMOY_DON_ID=0x66756e2d706f6c79676f6e2d616d6f792d310000000000000000000000000000

# AMOY_SUBSCRIPTION_ID - Chainlink Functions Subscription ID on Amoy
# -------------------------------------------------------------------
# PURPOSE: Your Chainlink Functions subscription ID for paying oracle fees with LINK
# VALUE: Numeric ID (e.g., 123) - You must create this before deployment
# USED IN: config/env.ts (getSubscriptionId function, line 58)
#          contracts/Vetra.sol - initialize() function (line 187) - Stored in subscriptionId
#          contracts/Vetra.sol - requestReserveUpdate() function (line 347) - Used for billing
#          scripts/updateReserve.ts - Referenced in comments
# HOW TO CREATE:
#   1. Visit https://functions.chain.link/polygon-amoy
#   2. Click "Create Subscription"
#   3. Fund with test LINK (recommend 2 LINK)
#   4. After deployment, add your Vetra contract address as a consumer
#   5. Update this value with your subscription ID
# EXAMPLE: If your subscription URL is https://functions.chain.link/.../123, use: 123
# DEFAULT: 0 (will work for testing but reserve updates will fail until you create subscription)
AMOY_SUBSCRIPTION_ID=0

# AMOY_ADMIN_ADDRESS - Admin Wallet Address on Testnet
# -----------------------------------------------------
# PURPOSE: Address that will receive DEFAULT_ADMIN_ROLE (can upgrade, pause, manage config)
# USED IN: config/env.ts (getAdminAddress function, line 66)
#          scripts/deploy.ts (line 36) - Passed to initialize() function
#          contracts/Vetra.sol - initialize() function (line 198) - Granted DEFAULT_ADMIN_ROLE
# PERMISSIONS: This address can:
#   - Upgrade the contract (contracts/Vetra.sol line 560 _authorizeUpgrade)
#   - Pause/unpause (contracts/Vetra.sol lines 497-507)
#   - Update reserve TTL (contracts/Vetra.sol line 423)
#   - Set mint limits (contracts/Vetra.sol line 437)
#   - Manage allowlist (contracts/Vetra.sol lines 450-463)
#   - Update Chainlink config (contracts/Vetra.sol line 482)
#   - Request reserve updates (contracts/Vetra.sol line 335)
#   - Grant/revoke roles
# TESTNET: Use your test wallet address
# SECURITY: Keep private key secure; this has full control over the contract
# EXAMPLE: 0x1234567890123456789012345678901234567890
AMOY_ADMIN_ADDRESS=

# AMOY_MINTER_ADDRESS - Minter Wallet Address on Testnet
# -------------------------------------------------------
# PURPOSE: Address that will receive MINTER_ROLE (can mint new VTR tokens)
# USED IN: config/env.ts (getMinterAddress function, line 70)
#          scripts/deploy.ts (line 37) - Passed to initialize() function
#          contracts/Vetra.sol - initialize() function (line 199) - Granted MINTER_ROLE
# PERMISSIONS: This address can:
#   - Mint new tokens (contracts/Vetra.sol line 229-270, mint function)
# RESTRICTIONS: Minting is subject to:
#   - Reserve freshness check (TTL validation, line 238-241)
#   - 1:1 backing invariant (supply <= reserve, line 245-249)
#   - Optional per-tx limit (line 254-257)
#   - Optional allowlist (line 259-262)
#   - Contract not paused (whenNotPaused modifier)
# TESTNET: Can be same as admin or a separate address
# EXAMPLE: 0x2345678901234567890123456789012345678901
AMOY_MINTER_ADDRESS=

# AMOY_BURNER_ADDRESS - Burner Wallet Address on Testnet
# -------------------------------------------------------
# PURPOSE: Address that will receive BURNER_ROLE (can burn VTR tokens from any account)
# USED IN: config/env.ts (getBurnerAddress function, line 74)
#          scripts/deploy.ts (line 38) - Passed to initialize() function
#          contracts/Vetra.sol - initialize() function (line 200) - Granted BURNER_ROLE
# PERMISSIONS: This address can:
#   - Burn tokens from any account (contracts/Vetra.sol line 287-303, burnFrom function)
# NOTE: Any user can also self-burn their own tokens without this role (line 308-318)
# RESTRICTIONS: Burning requires:
#   - Contract not paused (whenNotPaused modifier)
#   - Valid address and amount (line 289-290)
# TESTNET: Can be same as minter or a separate address
# EXAMPLE: 0x3456789012345678901234567890123456789012
AMOY_BURNER_ADDRESS=

# ====================================================================================================
# POLYGON MAINNET CONFIGURATION (production)
# ====================================================================================================
# These variables are used when NODE_ENV=production
# All POLYGON_* variables configure the mainnet deployment
# ⚠️  CRITICAL: These addresses control real value - verify carefully!

# POLYGON_RPC_URL - Polygon Mainnet RPC Endpoint
# -----------------------------------------------
# PURPOSE: JSON-RPC endpoint URL for connecting to Polygon mainnet
# USED IN: config/env.ts (getRpcUrl function, line 38)
#          hardhat.config.ts - Network configuration
#          scripts/deploy.ts - Blockchain connection (when NODE_ENV=production)
# PUBLIC ENDPOINTS:
#   - https://polygon-rpc.com (official, can be slow)
#   - https://polygon-mainnet.g.alchemy.com/v2/YOUR_KEY (recommended)
#   - https://polygon.llamarpc.com (LlamaNodes)
#   - https://rpc.ankr.com/polygon (Ankr)
# RECOMMENDATION: Use a paid RPC provider (Alchemy, Infura, QuickNode) for production
#                 Public endpoints may have rate limits
POLYGON_RPC_URL=https://polygon-rpc.com

# POLYGON_CHAIN_ID - Polygon Mainnet Chain ID
# --------------------------------------------
# PURPOSE: Numeric identifier for Polygon mainnet (ensures transactions go to correct network)
# VALUE: 137 (fixed, do not change)
# USED IN: config/env.ts (getChainId function, line 42)
#          hardhat.config.ts - Network chain ID validation
#          scripts/validate-config.ts - Chain ID verification
# VALIDATION: Checked against actual network chain ID when connecting
POLYGON_CHAIN_ID=137

# POLYGON_LINK_TOKEN - LINK Token Address on Polygon Mainnet
# -----------------------------------------------------------
# PURPOSE: Address of the LINK ERC-20 token contract on Polygon mainnet
# VALUE: 0xb0897686c545045aFc77CF20eC7A532E3120E0F1 (official Chainlink LINK on Polygon)
# USED IN: config/env.ts (getLinkToken function, line 46)
#          scripts/updateReserve.ts - LINK token reference (when NODE_ENV=production)
# WHERE TO GET LINK:
#   - Bridge from Ethereum: https://wallet.polygon.technology/polygon/bridge/
#   - Buy on DEX: QuickSwap, Uniswap V3 on Polygon
#   - CEX withdrawal: Withdraw LINK directly to Polygon network
# REQUIREMENT: Subscription needs LINK to pay for Chainlink Functions requests
# NOTE: This is the official mainnet LINK address, do not change
POLYGON_LINK_TOKEN=0xb0897686c545045aFc77CF20eC7A532E3120E0F1

# POLYGON_FUNCTIONS_ROUTER - Chainlink Functions Router Address on Polygon Mainnet
# ---------------------------------------------------------------------------------
# PURPOSE: Address of Chainlink Functions Router contract on Polygon mainnet
# VALUE: 0xdc2AAF042Aeff2E68B3e8E33F19e4B9fA7C73F10 (official Chainlink Functions Router)
# USED IN: config/env.ts (getFunctionsRouter function, line 50)
#          contracts/Vetra.sol - initialize() function (line 187) - Stored in functionsRouter
#          contracts/Vetra.sol - requestReserveUpdate() function (line 346) - Used for requests
# HOW IT WORKS: Production contract calls this router for real reserve updates
# DOCS: https://docs.chain.link/chainlink-functions/resources/supported-networks
# NOTE: This is the official mainnet router address, do not change
POLYGON_FUNCTIONS_ROUTER=0xdc2AAF042Aeff2E68B3e8E33F19e4B9fA7C73F10

# POLYGON_DON_ID - Chainlink DON ID for Polygon Mainnet
# ------------------------------------------------------
# PURPOSE: Identifier for the Chainlink Functions DON on Polygon mainnet
# VALUE: 0x66756e2d706f6c79676f6e2d6d61696e6e65742d31... (hex of "fun-polygon-mainnet-1")
# USED IN: config/env.ts (getDonId function, line 54)
#          contracts/Vetra.sol - initialize() function (line 187) - Stored in donId
#          contracts/Vetra.sol - requestReserveUpdate() function (line 352) - Routing
# FORMAT: bytes32 hex string
# NOTE: This is the official Polygon mainnet DON ID, do not change
POLYGON_DON_ID=0x66756e2d706f6c79676f6e2d6d61696e6e65742d310000000000000000000000

# POLYGON_SUBSCRIPTION_ID - Chainlink Functions Subscription ID on Polygon Mainnet
# ---------------------------------------------------------------------------------
# PURPOSE: Your production Chainlink Functions subscription ID
# VALUE: Numeric ID - You must create this before mainnet deployment
# USED IN: config/env.ts (getSubscriptionId function, line 58)
#          contracts/Vetra.sol - initialize() (line 187), requestReserveUpdate() (line 347)
# HOW TO CREATE:
#   1. Visit https://functions.chain.link/polygon
#   2. Create subscription (costs gas)
#   3. Fund with LINK (recommend 10+ LINK for production)
#   4. After deployment, add Vetra contract as consumer
#   5. Update this value
# COST: Each reserve update costs ~0.1-0.5 LINK
#       At 5-minute intervals: ~0.1 LINK/hour, ~2.4 LINK/day, ~72 LINK/month
# MONITORING: Set up alerts to refill when balance is low
# EXAMPLE: 456
POLYGON_SUBSCRIPTION_ID=0

# POLYGON_ADMIN_ADDRESS - Admin Wallet Address on Mainnet
# --------------------------------------------------------
# PURPOSE: Production admin address (receives DEFAULT_ADMIN_ROLE)
# VALUE: 0x29F1bE1E72c031539bc22437aFde22fF765EE00e (from client requirements)
# USED IN: config/env.ts (getAdminAddress function, line 66)
#          scripts/deploy.ts (line 36) - Passed to initialize()
#          contracts/Vetra.sol - initialize() (line 198) - Granted DEFAULT_ADMIN_ROLE
# PERMISSIONS: Full contract control (upgrade, pause, config, roles)
# ⚠️  SECURITY CRITICAL:
#   - Use hardware wallet (Ledger, Trezor) for this address
#   - Consider multisig (Gnosis Safe) for additional security
#   - NEVER expose private key
#   - This address controls real user funds
# CLIENT SPECIFIED: This exact address from requirements (do not change)
POLYGON_ADMIN_ADDRESS=0x29F1bE1E72c031539bc22437aFde22fF765EE00e

# POLYGON_MINTER_ADDRESS - Minter Wallet Address on Mainnet
# ----------------------------------------------------------
# PURPOSE: Production minter address (receives MINTER_ROLE)
# VALUE: 0x308442BBd27CAF66c614471Fb1933f7dd447b5da (from client requirements)
# USED IN: config/env.ts (getMinterAddress function, line 70)
#          scripts/deploy.ts (line 37) - Passed to initialize()
#          contracts/Vetra.sol - initialize() (line 199) - Granted MINTER_ROLE
# PERMISSIONS: Can mint new VTR tokens (subject to reserve backing)
# RESPONSIBILITIES:
#   - Monitor reserve levels before minting
#   - Ensure reserve updates are fresh (< 15 min old)
#   - Follow mint policies and limits
# ⚠️  SECURITY: Compromise of this key could lead to over-minting (limited by reserve)
# CLIENT SPECIFIED: This exact address from requirements (do not change)
POLYGON_MINTER_ADDRESS=0x308442BBd27CAF66c614471Fb1933f7dd447b5da

# POLYGON_BURNER_ADDRESS - Burner Wallet Address on Mainnet
# ----------------------------------------------------------
# PURPOSE: Production burner address (receives BURNER_ROLE)
# VALUE: 0x308442BBd27CAF66c614471Fb1933f7dd447b5da (from client requirements)
# USED IN: config/env.ts (getBurnerAddress function, line 74)
#          scripts/deploy.ts (line 38) - Passed to initialize()
#          contracts/Vetra.sol - initialize() (line 200) - Granted BURNER_ROLE
# PERMISSIONS: Can burn VTR tokens from any account
# RESPONSIBILITIES:
#   - Process redemption requests
#   - Burn tokens when USD is returned to users
#   - Maintain audit trail
# NOTE: Same address as minter in client requirements (single operator for both)
# CLIENT SPECIFIED: This exact address from requirements (do not change)
POLYGON_BURNER_ADDRESS=0x308442BBd27CAF66c614471Fb1933f7dd447b5da

# ====================================================================================================
# RESERVE & POLICY CONFIGURATION
# ====================================================================================================
# These settings apply to BOTH testnet and mainnet

# RESERVE_API_URL - FT Asset Management Reserve Proof API
# --------------------------------------------------------
# PURPOSE: API endpoint that returns the current USD reserve balance
# VALUE: FT Asset Management API with authentication parameters
# USED IN: config/env.ts (getReserveApiUrl function, line 78)
#          scripts/updateReserve.ts (line 31) - Passed to Chainlink Functions
# HOW IT WORKS:
#   1. Admin calls requestReserveUpdate() (contracts/Vetra.sol line 332)
#   2. Chainlink Functions fetches this URL (scripts/updateReserve.ts line 32-65)
#   3. Response is parsed and validated
#   4. Reserve is updated on-chain via handleOracleFulfillment() (line 378)
# API FORMAT: Should return JSON with balance field
# SECURITY: URL contains API credentials - keep .env secure!
# CLIENT PROVIDED: This exact URL from requirements (do not change)
RESERVE_API_URL=https://my.ftassetmanagement.com/api/bcl.asp?KeyCodeGUID=f9132e91-d810-11ef-a3af-00155d010b18&AccountGUID=d2e45a89-7de0-11f0-8b61-00155d010b18&AccountNr=42528

# RESERVE_UPDATE_INTERVAL_SECONDS - Target Interval for Reserve Updates
# ----------------------------------------------------------------------
# PURPOSE: How frequently to update reserve data (target, not enforced on-chain)
# VALUE: 300 seconds (5 minutes) as specified in requirements
# USED IN: config/env.ts (getReserveUpdateInterval function, line 86)
#          README.md - Documentation
#          scripts/updateReserve.ts - Referenced in comments
# HOW IT WORKS: Off-chain automation should call updateReserve.ts every 5 minutes
# AUTOMATION OPTIONS:
#   - Cron job: */5 * * * * npm run update-reserve:polygon
#   - Chainlink Automation: Set up time-based upkeep
#   - GitHub Actions: Scheduled workflow
#   - Cloud function: AWS Lambda / Google Cloud Functions on schedule
# NOTE: This is advisory only; contract enforces TTL, not update interval
# CLIENT REQUIREMENT: 5 minutes as specified
RESERVE_UPDATE_INTERVAL_SECONDS=300

# RESERVE_TTL_SECONDS - Maximum Age of Reserve Data (Time-To-Live)
# -----------------------------------------------------------------
# PURPOSE: Maximum staleness allowed for reserve data before minting is blocked
# VALUE: 900 seconds (15 minutes) as specified in requirements
# USED IN: config/env.ts (getReserveTTL function, line 90)
#          scripts/deploy.ts (line 39) - Passed to initialize()
#          contracts/Vetra.sol - initialize() function (line 204) - Stored in reserveTTL
#          contracts/Vetra.sol - mint() function (line 238-241) - Enforced on every mint
# HOW IT WORKS:
#   mint() checks: if (block.timestamp - lastReserveTimestamp > TTL) revert ReserveStale()
# EFFECT: If reserve is not updated within 15 minutes, minting will fail
# REASON: Prevents minting based on stale/outdated reserve data
# ADMIN CONTROL: Can be changed after deployment via setReserveTTL() (line 423)
# CLIENT REQUIREMENT: 15 minutes as specified
RESERVE_TTL_SECONDS=900

# MINT_PER_TX_LIMIT - Optional Per-Transaction Mint Limit
# --------------------------------------------------------
# PURPOSE: Maximum amount of VTR that can be minted in a single transaction
# VALUE: Amount in wei (18 decimals), or 0 to disable
# USED IN: config/env.ts (getMintPerTxLimit function, line 94)
#          contracts/Vetra.sol - stored in mintPerTxLimit (line 120)
#          contracts/Vetra.sol - mint() function (line 254-257) - Enforced if > 0
# HOW IT WORKS: if (mintPerTxLimit > 0 && amount > mintPerTxLimit) revert MintLimitExceeded()
# EXAMPLES:
#   - 0 = No limit (default)
#   - 1000000000000000000000000 = 1,000,000 VTR max per transaction
#   - 100000000000000000000 = 100 VTR max per transaction
# USE CASE: Prevent accidental large mints, rate limiting, security
# ADMIN CONTROL: Can be changed via setMintPerTxLimit() (line 437)
# DEFAULT: 0 (disabled)
MINT_PER_TX_LIMIT=0

# ALLOWLIST_ENABLED - Enable/Disable Mint Recipient Allowlist
# ------------------------------------------------------------
# PURPOSE: Whether to restrict minting to approved addresses only
# VALUE: true or false
# USED IN: config/env.ts (isAllowlistEnabled function, line 98)
#          contracts/Vetra.sol - stored in allowlistEnabled (line 123)
#          contracts/Vetra.sol - mint() function (line 259-262) - Enforced if enabled
# HOW IT WORKS: if (allowlistEnabled && !allowlist[to]) revert RecipientNotAllowed()
# WORKFLOW:
#   1. Admin sets allowlistEnabled = true via setAllowlistEnabled()
#   2. Admin adds addresses via setAllowlistAddress(addr, true)
#   3. mint() checks allowlist before minting
# USE CASE: KYC/AML compliance, private beta, controlled rollout
# ADMIN CONTROL:
#   - Toggle via setAllowlistEnabled() (line 450)
#   - Add/remove addresses via setAllowlistAddress() (line 463)
# DEFAULT: false (disabled - anyone can receive mints)
ALLOWLIST_ENABLED=false

# ====================================================================================================
# END OF CONFIGURATION
# ====================================================================================================
#
# QUICK START:
# 1. Copy this file: cp .env.example .env
# 2. Fill in PRIVATE_KEY_DEV with your wallet's private key
# 3. Fill in AMOY_ADMIN_ADDRESS, AMOY_MINTER_ADDRESS, AMOY_BURNER_ADDRESS (your test wallet)
# 4. Create Chainlink subscription and update AMOY_SUBSCRIPTION_ID
# 5. Run: npm run validate
# 6. Run: npm run deploy:amoy
#
# DEPLOYMENT CHECKLIST:
# ☐ .env file created and configured
# ☐ PRIVATE_KEY_DEV filled with test wallet key
# ☐ Testnet addresses filled (AMOY_*)
# ☐ Deployer wallet funded (3 AMOY POL from faucet)
# ☐ Deployer wallet has LINK (2 test LINK from faucet)
# ☐ Chainlink subscription created and funded
# ☐ AMOY_SUBSCRIPTION_ID updated
# ☐ Tests passing: npm test
# ☐ Config validated: npm run validate
# ☐ Ready to deploy: npm run deploy:amoy
#
# MAINNET CHECKLIST:
# ☐ All testnet testing complete
# ☐ Contract verified on Amoy: npm run verify:amoy
# ☐ Reserve updates working on testnet
# ☐ Admin wallet secured (hardware wallet recommended)
# ☐ Mainnet Chainlink subscription created and funded (10+ LINK)
# ☐ POLYGON_SUBSCRIPTION_ID updated
# ☐ Change NODE_ENV to 'production'
# ☐ Validate: npm run validate
# ☐ Deploy: npm run deploy:polygon
# ☐ Add contract as subscription consumer
# ☐ Test reserve update: npm run update-reserve:polygon
# ☐ Verify: npm run verify:polygon
# ☐ Monitor: npm run monitor:polygon
#
# DOCUMENTATION:
# - Full deployment guide: README.md
# - Contract documentation: contracts/Vetra.sol
# - Script usage: See package.json scripts section
# - Network info: https://docs.chain.link/chainlink-functions
#
# ====================================================================================================
